<?xml version="1.0"?>
<doc>
<assembly>
<name>
GeoFDA
</name>
</assembly>
<members>
<member name="T:GeoFDA.My.MyWpfExtension">
 <summary>
 Module used to define the properties that are available in the My Namespace for WPF
 </summary>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.My.MyWpfExtension.Application">
 <summary>
 Returns the application object for the running application
 </summary>
</member>
<member name="P:GeoFDA.My.MyWpfExtension.Computer">
 <summary>
 Returns information about the host computer.
 </summary>
</member>
<member name="P:GeoFDA.My.MyWpfExtension.User">
 <summary>
 Returns information for the current user.  If you wish to run the application with the current 
 Windows user credentials, call My.User.InitializeWithWindowsUser().
 </summary>
</member>
<member name="P:GeoFDA.My.MyWpfExtension.Log">
 <summary>
 Returns the application log. The listeners can be configured by the application's configuration file.
 </summary>
</member>
<member name="P:GeoFDA.My.MyWpfExtension.Windows">
 <summary>
 Returns the collection of Windows defined in the project.
 </summary>
</member>
<member name="T:GeoFDA.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:GeoFDA.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:GeoFDA.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="T:GeoFDA.AboutWindow">
<summary>
AboutWindow
</summary>
</member>
<member name="M:GeoFDA.AboutWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.AnalysisYears">
<summary>
AnalysisYears
</summary>
</member>
<member name="M:GeoFDA.AnalysisYears.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.CreateNewStudy">
<summary>
CreateNewStudy
</summary>
</member>
<member name="M:GeoFDA.CreateNewStudy.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.BasicImpactAreaImporter">
<summary>
BasicImpactAreaImporter
</summary>
</member>
<member name="M:GeoFDA.BasicImpactAreaImporter.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.ImpactAreaErrorReport">
<summary>
ImpactAreaErrorReport
</summary>
</member>
<member name="M:GeoFDA.ImpactAreaErrorReport.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="M:GeoFDA.FilePathManipulator.MakeRelative(System.String,System.String)">
 <summary>
 Takes an input file and a file that is the base file, and produces a relative path
 </summary>
 <param name="filename">the file you wish to have a relative path to</param>
 <param name="baseFilename">the file location you wish to make the other file relative</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FilePathManipulator.MakeAbsolute(System.String,System.String)">
 <summary>
 takes an input relative file path and converts it to an absolute path
 </summary>
 <param name="filename">the input file that is relative</param>
 <param name="baseFilename">the location of the file it is relative to</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:GeoFDA.GridImporter">
<summary>
GridImporter
</summary>
</member>
<member name="M:GeoFDA.GridImporter.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.DamageCategoryDeleted">
<summary>
DamageCategoryDeleted
</summary>
</member>
<member name="M:GeoFDA.DamageCategoryDeleted.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.OccupancyTypeDeleted">
<summary>
OccupancyTypeDeleted
</summary>
</member>
<member name="M:GeoFDA.OccupancyTypeDeleted.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.StructureErrorForm">
<summary>
StructureErrorForm
</summary>
</member>
<member name="M:GeoFDA.StructureErrorForm.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.EditDamageCategories">
<summary>
EditDamageCategories
</summary>
</member>
<member name="M:GeoFDA.EditDamageCategories.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.ImportFromHAZUS">
<summary>
ImportFromHAZUS
</summary>
</member>
<member name="M:GeoFDA.ImportFromHAZUS.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.ImportFromShapefile">
<summary>
ImportFromShapefile
</summary>
</member>
<member name="M:GeoFDA.ImportFromShapefile.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.ImportStructuresFromFDAFile">
<summary>
ImportStructuresFromFDAFile
</summary>
</member>
<member name="M:GeoFDA.ImportStructuresFromFDAFile.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.NSI_Importer">
<summary>
NSI_Importer
</summary>
</member>
<member name="M:GeoFDA.NSI_Importer.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.OcctypeErrorReport">
<summary>
OcctypeErrorReport
</summary>
</member>
<member name="M:GeoFDA.OcctypeErrorReport.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.Logger">
<summary>
Logger
</summary>
</member>
<member name="M:GeoFDA.Logger.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.CopyIndexInfoFromExisting">
<summary>
CopyIndexInfoFromExisting
</summary>
</member>
<member name="M:GeoFDA.CopyIndexInfoFromExisting.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.EconFileSpec">
<summary>
EconFileSpec
</summary>
</member>
<member name="M:GeoFDA.EconFileSpec.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.IndexLocations">
<summary>
IndexLocations
</summary>
</member>
<member name="M:GeoFDA.IndexLocations.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.ZipWizard">
<summary>
ZipWizard
</summary>
</member>
<member name="M:GeoFDA.ZipWizard.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.Properties">
<summary>
Properties
</summary>
</member>
<member name="M:GeoFDA.Properties.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.Rename">
<summary>
Rename
</summary>
</member>
<member name="M:GeoFDA.Rename.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="M:GeoFDA.StudyTreeNode.#ctor(System.Xml.Linq.XElement)">
 <summary>
 This constructor is intended to be utilized for openeing existing studies
 </summary>
 <param name="xele">an xml document that comes from an existing GeoFDA file (*.GeoFDA)</param>
 <remarks></remarks>
</member>
<member name="T:GeoFDA.ImpactAreaEditor">
<summary>
ImpactAreaEditor
</summary>
</member>
<member name="M:GeoFDA.ImpactAreaEditor.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.TerrainBrowser">
<summary>
TerrainBrowser
</summary>
</member>
<member name="M:GeoFDA.TerrainBrowser.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:GeoFDA.Application">
<summary>
Application
</summary>
</member>
<member name="M:GeoFDA.Application.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="M:GeoFDA.Application.Main">
<summary>
Application Entry Point.
</summary>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.#ctor(System.String)">
 <summary>
 The base class constructor creates the treenode with the proper header name, and builds any required directories if they do not exist.
 </summary>
 <param name="headername">the name for the treeviewitem you would like to have displayed on the study tree.</param>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.GetCurrentDirectory">
 <summary>
 This returns the current full directory which includes the root directory plus any sub directories.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.GetRootDirectory">
 <summary>
 This allows read access to the shared root directory.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.SetRootDirectory">
 <summary>
 this allows write access to the shared root directory
 </summary>
 <value></value>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.SetMapTreeView">
 <summary>
 Allows write access to set the shared maptreeview
 </summary>
 <value></value>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.SetIsExpanded">
 <summary>
 Allows write access to the shared variable of "IsExpanded" on the base class TreeViewItem.  This must be set before the framework treenodes are added, but it is shared, so setting it for one, sets it for all.
 </summary>
 <value></value>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.SetMainContextMenu">
 <summary>
 Allows write access to the shared Main context menu for the program.  this will allow any framework treenode to assign handlers to the click events for items in the main context menu.
 </summary>
 <value></value>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.GetMainContextMenu">
 <summary>
 Allows access to the private shared main context menu.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.FirstLevelSubNodes">
 <summary>
 Returns all immediate decendents of the current treeviewitem
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.GetMapTreeView">
 <summary>
 provides read access to the shared maptreeview so that feature nodes can be added from the study tree.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.Saved">
 <summary>
 A property that allows any framework tree node to declare if it is saved or if there are edits that are unsaved. True = saved False = unsaved. Also, it sets unsaved treenodes to have an asterisk in the header name.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.ConvertToRelativePath(System.String)">
 <summary>
 Returns a path relative to the current root directory of the project, unless the filepath is not in the root directory, then it returns the file path as is.
 </summary>
 <param name="FilePath"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.UpdateHeaderForSave">
 <summary>
 Sets a visual que for the user that this framework tree item has unsaved information
 </summary>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.AddFrameworkTreeNode(GeoFDA.FrameworkTreeNode)">
 <summary>
 Adds the framework treenode to the firstlevel subnodes for its parent, adds the item to the visual study tree, and sends a message to the study tree node that a new child has been added to the tree.
 </summary>
 <param name="FTN">the framework treenode that is being added.</param>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.CheckForNameConflicts(GeoFDA.FrameworkTreeNode)">
 <summary>
 This is intended to send a message to the studytreenode that a new child is being added, and to check for name conflicts before it is added. currently has issues...
 </summary>
 <param name="ftn"></param>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.FrameworkTreeNode_MouseRightButtonUp(System.Object,System.Windows.Input.MouseButtonEventArgs)">
 <summary>
 This is to prevent the native inheritance of parent context menus if no menu is set for a treeviewitem
 </summary>
 <param name="sender"></param>
 <param name="e"></param>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.Bubble(GeoFDA.FrameworkTreeNode)">
 <summary>
 This sends a message to the studytreenode that a new frameworktreenode is being added to the study tree, and that it needs to be added to the treenode list for messaging.
 </summary>
 <param name="ftn"></param>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.op_Equality(GeoFDA.FrameworkTreeNode,GeoFDA.FrameworkTreeNode)">
 <summary>
 Adding the ability to compare treenodes to determine if they are equivalent.  right now it is only checking type and header name. (if checkfornameconflict gets fixed, this will be enough to declare equivalency)
 </summary>
 <param name="left"></param>
 <param name="right"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.op_Inequality(GeoFDA.FrameworkTreeNode,GeoFDA.FrameworkTreeNode)">
 <summary>
 requried if the operator = is defined
 </summary>
 <param name="left"></param>
 <param name="right"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.GetAllFrameworkTreenodesOfType(System.Type)">
 <summary>
 Allows a frameworktreenode to request for all current treenodes of a specific type. Returns a list of existing ftns of that type
 </summary>
 <param name="NodeTypeToGetInfoFrom">The type of treenode to search for</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.GetFrameworkTreenodeByNameAndType(System.String,System.Type)">
 <summary>
 do not use this for hydraulics child tree nodes!!!!!
 </summary>
 <param name="header"></param>
 <param name="nodetype"></param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.AddFrameworkChildren">
 <summary>
 Enables treenodes with logical children that are not user specified to be added programatically.
 </summary>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.AddFrameworkChildren(System.Xml.Linq.XElement)">
 <summary>
 Allows framework children to be added through an xml element, which is used when an existing study is opened.
 </summary>
 <param name="ele"></param>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.GetSubDirectory">
 <summary>
 This defines the subdirectory for the frameworktreenode.  For this to function properly, the string must be a const declaration because the function is called during the base class constructor.
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:GeoFDA.FrameworkTreeNode.GetNodeName">
 <summary>
 This defines the node name for any framework treenode when it is being written to xlement.  (alternatively we could use the name of the class itself)
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.SetContextMenu">
 <summary>
 this is called during the base class constructor to add any context menu items that are unique to the specific frameworktreenode. IF no code is defined in this sub, the context menu is set to be collapsed.
 </summary>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.WriteToXML">
 <summary>
 allows a frameworktreenode to define its own saving location and data for any unique attributes that are not stored at the project file level.
 </summary>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.WriteToXMLElement">
 <summary>
 This allows a framework treenode to define the xelement that is written to the project directory.  If this is not overriden, a node of the "GetNodeName" will be written and all firstlevel treenodes will be written as well.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.ReadFromXMLElement(System.Xml.Linq.XElement)">
 <summary>
 this allows a framework treenode to define the way to construct itself from an xelement.  if this is not overriden, a parent must construct the treenode or it will not be added to the tree on open existing.
 </summary>
 <param name="xele"></param>
 <remarks></remarks>
</member>
<member name="M:GeoFDA.FrameworkTreeNode.ReadFromXMl(System.String)">
 <summary>
 This allows a framework treenode the opporutnity to read anything it has written to xml that is unique to the treenode and not saved in the project study tree xelement node.
 </summary>
 <param name="path"></param>
 <remarks></remarks>
</member>
<member name="T:GeoFDA.MainWindow">
<summary>
MainWindow
</summary>
</member>
<member name="M:GeoFDA.MainWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
</members>
</doc>

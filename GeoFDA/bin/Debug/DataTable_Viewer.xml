<?xml version="1.0"?>
<doc>
<assembly>
<name>
DataTable_Viewer
</name>
</assembly>
<members>
<member name="T:DataTable_Viewer.ColumnStatsWindow">
<summary>
ColumnStatsWindow
</summary>
</member>
<member name="M:DataTable_Viewer.ColumnStatsWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:DataTable_Viewer.DBFEditSession">
 <summary>
 stores an undo and redo stack.  redo is cleared each time the edits are applied to disk
 </summary>
 <remarks></remarks>
</member>
<member name="P:DataTable_Viewer.DBFEditSession.GetEditList">
 <summary>
 the list of currently active edits
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="P:DataTable_Viewer.DBFEditSession.GetRedoList">
 <summary>
 the list of previous edits that have been undone
 </summary>
 <value></value>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataTable_Viewer.DBFEditSession.Undo">
 <summary>
 moves an active edit into the redo stack
 </summary>
 <remarks></remarks>
</member>
<member name="M:DataTable_Viewer.DBFEditSession.Redo">
 <summary>
 moves an undone edit back into the active edit stack
 </summary>
 <remarks></remarks>
</member>
<member name="M:DataTable_Viewer.DBFEditSession.GetEditForCell(DataTable_Viewer.DGVCell)">
 <summary>
 returns a specific edit for a specific cell (the most recent one for this cell), dont ask for an edit unless you know one exists (first call geteditedcellsinrange)
 </summary>
 <param name="cell">the row column address of the cell.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataTable_Viewer.DBFEditSession.AddEdit(DataTable_Viewer.DBFEdit)">
 <summary>
 adds an edit to the applied edits stack (and clears the redo stack)
 </summary>
 <param name="newedit">a new edit that is being applied.</param>
 <remarks></remarks>
</member>
<member name="M:DataTable_Viewer.DBFEditSession.ApplyEdits(DataBase_Reader.DataTableReader)">
 <summary>
 applies the edits that are currently valid from earliest to latest (so that the latest edit is the last edit made to the dbf)
 </summary>
 <param name="d">the dbf reader that the edit session is applied to.</param>
 <remarks></remarks>
</member>
<member name="T:DataTable_Viewer.DBFEdit">
 <summary>
 A basic DBF edit class that contains the location and value of an edit
 </summary>
 <remarks></remarks>
</member>
<member name="M:DataTable_Viewer.DBFEdit.ApplyEdit(DataBase_Reader.DataTableReader)">
 <summary>
 Applies the edit to the dbf through the dbf reader that is passed as an argument
 </summary>
 <param name="dbf">the dbf reader (must be the same dbf as the edit applies to)</param>
 <remarks></remarks>
</member>
<member name="M:DataTable_Viewer.DBFEdit.GetEditedValue(DataTable_Viewer.DGVCell)">
 <summary>
 Returns a single string for the cell in question, if the edit being asked for a value does not apply to this cell, an exception is thrown
 </summary>
 <param name="cell">the cell being asked to get the edited value from</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataTable_Viewer.DBFEdit.IsMultiCellEdit">
 <summary>
 determines if the edit is a paste edit, which could apply to a range of cells rather than a specific cell.
 </summary>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataTable_Viewer.DBFEdit.ContainsCell(DataTable_Viewer.DGVCell)">
 <summary>
 Checks if the cell in question is in this edit
 </summary>
 <param name="cell">a row column pair</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="T:DataTable_Viewer.ErrorWindow">
<summary>
ErrorWindow
</summary>
</member>
<member name="M:DataTable_Viewer.ErrorWindow.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:DataTable_Viewer.FieldCalculator">
<summary>
FieldCalculator
</summary>
</member>
<member name="M:DataTable_Viewer.FieldCalculator.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:DataTable_Viewer.SelectByAttribute">
<summary>
SelectByAttribute
</summary>
</member>
<member name="M:DataTable_Viewer.SelectByAttribute.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:DataTable_Viewer.FindAndReplace">
<summary>
FindAndReplace
</summary>
</member>
<member name="M:DataTable_Viewer.FindAndReplace.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:DataTable_Viewer.WPF_Custom_Viewer">
<summary>
WPF_Custom_Viewer
</summary>
</member>
<member name="F:DataTable_Viewer.WPF_Custom_Viewer._TableToolbarTray">
<summary>
TableToolbarTray Name Field
</summary>
</member>
<member name="F:DataTable_Viewer.WPF_Custom_Viewer._EditorToolbar">
<summary>
EditorToolbar Name Field
</summary>
</member>
<member name="M:DataTable_Viewer.WPF_Custom_Viewer.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:DataTable_Viewer.WinForms_Viewer">
<summary>
WinForms_Viewer
</summary>
</member>
<member name="M:DataTable_Viewer.WinForms_Viewer.InitializeComponent">
<summary>
InitializeComponent
</summary>
</member>
<member name="T:DataTable_Viewer.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DataTable_Viewer.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DataTable_Viewer.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
</members>
</doc>

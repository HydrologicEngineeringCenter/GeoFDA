<?xml version="1.0"?>
<doc>
<assembly>
<name>
DataBase_Reader
</name>
</assembly>
<members>
<member name="M:DataBase_Reader.DataTableReader.GetColumn(System.Int32)">
 <summary>
 returns a specified field of data from the data table as an array of the column type. 
 </summary>
 <param name="ColumnIndex">Column index of the desired data.</param>
 <returns>A one-dimensional array of the column type.</returns>
 <remarks>Written 9/8/2012 by Woodrow Lee Fields.</remarks>
</member>
<member name="M:DataBase_Reader.DataTableReader.GetColumn(System.String)">
 <summary>
 returns a specified field of data from the data table as an array of the column type. 
 </summary>
 <param name="ColumnName">Name of the desired column of data.</param>
 <returns>A one-dimensional array of the column type.</returns>
 <remarks>Written 9/8/2012 by Woodrow Lee Fields.</remarks>
</member>
<member name="M:DataBase_Reader.DataTableReader.IsNumericType(System.Type)">
 <summary>
 Determines if a type is numeric.  Nullable numeric types are considered numeric.
 </summary>
 <remarks>
 Boolean is not considered numeric.
 http://stackoverflow.com/questions/124411/using-net-how-can-i-determine-if-a-type-is-a-numeric-valuetype
 </remarks>
</member>
<member name="M:DataBase_Reader.DataTableReader.ExportToCSV(System.String,System.Int32[],System.Int32[])">
 <summary>
 Exports a data table to a comma delimited text file.
 </summary>
 <param name="FilePath">Output file path</param>
 <param name="RowIndicesToExport">Which rows to export as row indices</param>
 <param name="ColumnIndicesToExport">Which columns to export as column indices</param>
 <remarks></remarks>
</member>
<member name="M:DataBase_Reader.DataTableReader.ExportToXLSX(System.String,System.Int32[],System.Int32[])">
 <summary>
 Exports the contents of a DataTable to an excel spreadsheet.
 FilePath must have an .xlsx or .xls extension.
 The name of the excel worksheet will be the name of the supplied DataTable
 </summary>
</member>
<member name="M:DataBase_Reader.DBFReader.GetRecordIndexFromRowIndex(System.Int32)">
 <summary>
 Gets the record index using a row index from only non-deleted rows
 </summary>
 <param name="RowIndex">Row index of only non-deleted rows</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataBase_Reader.DBFReader.GetRowIndexFromRecordIndex(System.Int32)">
 <summary>
 Gets the appropriate record start position row index using a record index since records can have a deleted flag.
 </summary>
 <param name="RecordIndex">Record index of row which could be deleted and not included in the record start positions list.</param>
 <returns></returns>
 <remarks></remarks>
</member>
<member name="M:DataBase_Reader.DBFReader.UndoDelete(System.Int32)">
 <summary>
 Looks to see if the record at the specified row number is marked for delete, if it is then it will be marked as not deleted.
 </summary>
 <param name="RecordIndex"> the row index that will be undeleted where the first row = 0</param>
 <remarks></remarks>
</member>
<member name="M:DataBase_Reader.DBFReader.UndoMultipleDelete(System.Int32[])">
 <summary>
 Looks to see if the records at the specified row numbers are marked for delete, if they are then they will be marked as not deleted.
 </summary>
 <param name="RecordIndices"> Array of row indexes that will be undeleted</param>
 <remarks></remarks>
</member>
<member name="T:DataBase_Reader.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:DataBase_Reader.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:DataBase_Reader.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
</members>
</doc>
